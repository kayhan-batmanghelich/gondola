.. raw:: html

   <!--

   ============================================================================

      DO NOT EDIT THIS FILE! It was generated using Sphinx from:

      Origin:   $URL: https://sbia-svn.uphs.upenn.edu/projects/GONDOLA/branches/gondola-1.0/doc/documentation.rst $
      Revision: $Rev: 705 $

   ============================================================================

   -->

.. raw:: latex

    \clearpage

=============
Documentation
=============

A :download:`PDF Version <GONDOLA.pdf>` of this documentation is available online and
included with the distribution package.


Command-line Tools
==================

The GONDOLA software package provides the following main command-line programs:

.. The tabularcolumns directive is required to help with formatting the table properly
   in case of LaTeX (PDF) output.

.. tabularcolumns:: |p{3.4cm}|p{12.2cm}|

+----------------------+------------------------------------------------------------------------+
| Program              | Description                                                            |
+======================+========================================================================+
| ``gondola``          | A MATLAB executable which implements the `Generative-Discriminative    |
|                      | Basis Learning`_ and feature extraction.                               |
+----------------------+------------------------------------------------------------------------+
| ``gondola-crossval`` | This Python script is used to perform the different steps of the       |
|                      | `Cross-validation Experiments`_. It therefore either calls ``gondola`` |
|                      | with the appropriate command-line arguments or one of the other        |
|                      | auxiliary executables for the search of the best parameters for        |
|                      | each classifier and the training of these classifier.                  |
+----------------------+------------------------------------------------------------------------+
| ``gondola-config``   | This utility Python script sets up the cross-validation experiments    |
|                      | and generates the default configuration files for both ``gondola``     |
|                      | and ``gondola-crossval``.                                              |
+----------------------+------------------------------------------------------------------------+

.. note:: See the help output of each of these programs for further usage information.
          To display the help, simply run the commands either with no arguments or
          using the ``-h`` (``--help``) switch.


Generative-Discriminative Basis Learning
========================================

The Generative-Discriminative Basis Learning [MICCAI2011]_ [TMI2012]_ method is
implemented by the ``gondola`` MATLAB package, where the main function is named ``gondola.main``.
For convenience, the MATLAB function ``gondola`` located at the same level as the MATLAB package
is provided, which calls the ``gondola.main`` function. For the convenient execution of this
MATLAB function as stand-alone program, different options are provided thanks to BASIS_ during
the configuration of the build of the GONDOLA software. No matter which option was chosen,
the command-line use of the ``gondola`` executable is always as in the following, where ``gondola``
refers to the installed ``gondola`` executable instead of the MATLAB function, but both can be
called with the same arguments with the only difference being the syntax required by the shell
versus the one required by MATLAB.

.. note:: The ``gondola`` executable is either a Bash script, a Windows NT Command,
          or a binary file created by the MATLAB Compiler. You can further use the
          ``gondola`` MATLAB function directly from within MATLAB.
          See the :doc:`faq` for more information on how to do this.

The ``gondola`` command implements the following subfunctions:

+-------------+------------------------------------------------------+
| Function    | Description                                          |
+=============+======================================================+
| ``learn``   | Learn the basis vectors from training samples.       |
+-------------+------------------------------------------------------+
| ``extract`` | Extract features given the learned basis vectors.    |
+-------------+------------------------------------------------------+
| ``show``    | Save the learned basis vectors as NIfTI-1 images.    |
+-------------+------------------------------------------------------+
| ``help``    | Show the help and exit/return.                       |
+-------------+------------------------------------------------------+

.. raw:: latex

    \clearpage

Data Preparation
----------------

The input to ``gondola`` is a text file listing the names of the image files from which
the basis vectors are learned, or from which the learned features shall be extracted from.
Class labels for each sample have to be provided for the learning process. To maintain a
common file format, class labes are also required for the feature extraction even if those
are extracted from the test set of images. If the correct labels are unknown, use the value
0 as in case of the feature extraction the class labels are ignored anyways. Another input
required for the feature extraction step is a text file with the subject IDs corresponding
to each row of images in the image list file.

.. note:: All input images must be registered to a common template. The file format of the
          images can be any that is supported by the ITK_.

The file format of the image list file is as follows::

  <#subjects> <#images per subjects>
  <dimx> <dimy> <dimz>
  <root>

  <subject 1, image 1> [<subject 1, image 2>...] <label>
  <subject 2, image 1> [<subject 2, image 2>...] <label>

where ``<#subjects>`` is the number of subjects, ``<#images per subjects>`` is the number
of images, e.g., modalities, tissue scans,..., per subject, ``<dimx> <dimy> <dimz>``
is the size of each image, and ``<root>`` is the common root directory of the image files
used to make relative paths absolute. If the root directory itself is a relative path,
it is considered to be relative to the location of the image list file. Thus, a root
directory value of ``.`` corresponds to the directory where the image list file is located.
The last column of each row after the file header specifies the class ``<label>`` which must
be a positive number or 0 for unlabeled data. This class label is only considered during
the learning of the basis vectors, but ignored otherwise. Yet, it has to be specified.

.. note:: Each image file path can be either absolute or relative. If it is an absolute
          path it is used as specified. Otherwise, the ``<root>`` directory is used to
          make the relative image file path absolute. While in most cases all images
          will be located within the same root directory, it is possible to have the
          image files stored in different directories by using absolute file paths.

The format of the corresponding subject ID list file is simply::

  <subject ID 1>
  <subject ID 2>

The paths to these input text files are specified as follows on the command line::

    gondola [learn|extract] [options] --imagelistfile images.lst --idlistfile ids.lst


.. _gondolacfg:

Configuration
-------------

The parameters of the Generative-Discriminative Basis Learning have to be specified
in a configuration file such as::

    algo:                   MultiViewXY
    csolver:                SPG
    downsampleratio:        2
    maxitr:                 300
    numbasisvectors:        30
    saveaftereachiteration: True

By default, this configuration file has to be named ``gondola.cfg`` and be located
in the current working directory. The ``--config`` option can be used, however,
to specify a different file path for the configuration file.

See the help of the ``gondola`` command for details on the parameters that can be
set in the configuration file. If a parameter is not set in the configuration file,
its default value is used. The ``algo`` and ``numbasisvectors`` settings are,
however, required.

.. hint:: The configuration file is generated by ``gondola-config`` (see :ref:`crossvalcfg`).


Output Files
------------

The output file of the learning process is a MATLAB file
(by default named ``gondola.mat``) which stores the parameters that were used by
the method in the ``ConstVars`` structure, the optimized variables ``B``, ``C``,
and ``w``, and the optimization history. This output file is input to the feature
extraction which is performed by ``gondola extract``. The extracted features are stored
in the `Attribute-Relation File Format (ARFF)`_ of Weka_. The learned basis vectors
can be saved as NIfTI-1 images of data type ``DT_FLOAT32``.


Cross-validation Experiments
============================

To find out how well the results generalize, the learning of the basis vectors,
extraction of the features, and the classification must typically be repeated
several times. For the convenient execution of such cross-validation experiments
using given training and testing data sets, the ``gondola-crossval`` command is
provided by this package. The exact commands to execute as well as the names and
paths of the input and output files for each step of the cross-validation
experiments are specified by a configuration file which is input to this
``gondola-crossval`` command.

In the following, the commands that are executed to run a cross-validation
experiment with 5 folds using the 20 example images included with the GONDOLA
software are described for illustration.


.. _crossvalcfg:

Configure the Experiments
-------------------------

The first step is to create training and testing list files from the text file
listing all available samples as well as the generation of the configuration
files for both ``gondola`` as well as ``gondola-crossval``:

.. code-block:: bash

    mkdir gondola-cv-example && cd gondola-cv-example
    gondola-config --algo MultiViewXY --csolver SPG --numbasisvectors 30 \
            --numfolds 5 ${EXAMPLE_DIR}/images.lst ${EXAMPLE_DIR}/ids.lst

where ``${EXAMPLE_DIR}`` refers to the ``example/`` directory of the GONDOLA
distribution package.

This command will generate the configuration file for ``gondola``
(:ref:`ref <gondolacfg>`), named ``gondola.cfg``, the configuration file for
``gondola-crossval``, named ``crossval.cfg``, and a separate directory for
each fold, named after the ID of the fold, i.e., ``1`` for the first
cross-validation fold, ``2`` for the second, and so on. Each fold directory
contains the files ``training.lst``, ``trainids.lst``, ``testing.lst``, and
``testids.lst`` for the corresponding disjoint training and testing sets.

See the generated ``crossval.cfg`` file and the help of ``gondola-crossval``
for details on the content and format of this configuration file. For most cases,
the default settings should be used and only the parameters of ``gondola`` itself
be modified, i.e., those specified by the ``gondola.cfg`` file.

The parameters used for the basis learning can be either changed by editing the
generated ``gondola.cfg`` file or by supplying the desired parameter value as
argument to ``gondola-config``::

    gondola-config [...] --lambda_gen 10 --maxitr 200


Run Experiment for each Fold
----------------------------

The first step of each experiment is the learning of the basis. Therefore, run
the command::

    gondola-crossval learn

in the directory where the ``crossval.cfg`` file is located or alternatively
specify the configuration file using the ``--config`` option as in::

    gondola-crossval learn --config /path/to/mycrossval.cfg

.. tip:: If the learning process was interrupted, the ``--continue`` option can
         be used to continue the learning beginning from the last saved iteration
         instead of starting all over from the scratch.

The output MATLAB files will be written to the directories specified by the
configuration file.

All other steps are executed similarly, where only the name of the step to execute differs.
Hence, to save the learned basis as NIfTI-1 images, to extract the features and train
the classifiers, and to classify the training and testing sets, run the following commands
in the given order::

    gondola-crossval show
    gondola-crossval extract
    gondola-crossval search
    gondola-crossval classify

A summary of the cross-validation experiments which is both printed to screen and further
written to a text file (see ``summaryfile`` setting in the ``crossval.cfg`` configuration file)
can be generated by running the::

    gondola-crossval summarize

command.

.. note:: Using the ``-v`` option, the exact command that is executed by each of these
          steps is printed to screen. Moreover, the option ``--simulate`` can be used
          to only print those commands to screen without actually executing them.
          This can be used to copy only single commands in order to rerun these only.

.. tip:: Instead of running each of the named steps manually, you can run the command
         ``gondola-crossval all``.

.. warning:: Note, however, that as convenient the ``all`` step is, it requires each
             step to be executed serially (the default). If you modified the commands
             specified in the ``crossval.cfg`` configuration that are executed by each
             step, for example, to execute one or more of the steps in parallel by
             submitting separate jobs to a batch-queuing system such as the
             `Oracle Grid Engine`_, it is recommended to execute the steps one after
             another and not to use the ``gondola-crossval all`` command.


General Questions
=================

If you have any questions regarding GONDOLA, please contact us at ``sbia-software at uphs.upenn.edu``.
Emails sent to this address will be forwarded to the right people at SBIA who will then reply to you
and try to answer your questions.

Have also a look at the list of :doc:`faq`.



.. _BASIS: http://www.rad.upenn.edu/sbia/software/basis/
.. _ITK: http://www.itk.org/
.. _Oracle Grid Engine: http://www.oracle.com/us/products/tools/oracle-grid-engine-075549.html
.. _Attribute-Relation File Format (ARFF): http://www.cs.waikato.ac.nz/ml/weka/arff.html
.. _Weka: http://www.cs.waikato.ac.nz/ml/weka/
